/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms.radno_vreme;

import communication.Communication;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import javax.swing.JOptionPane;
import model.RadnoVreme;
import model.Smena;
import model.Zaposleni;

/**
 *
 * @author Marko
 */
public class DodajIzmeniRadnoVremeForma extends javax.swing.JFrame {

    /**
     * Creates new form DodajIzmeniRadnoVremeForma
     */
    private RadnoVremeForma glavnaFormaRV;
    private Zaposleni zaposleni;
    private RadnoVreme radnoVreme;
    private Communication communication = Communication.getInstance();

    public DodajIzmeniRadnoVremeForma(RadnoVremeForma glavnaFormaRV, Zaposleni zaposleni, RadnoVreme radnoVreme) {
        this.glavnaFormaRV = glavnaFormaRV;
        this.zaposleni = zaposleni;
        this.radnoVreme = radnoVreme;
        initComponents();
        setTitle("Forma za dodavanje i izmenu radnog vremena");
        btnIzmeni.setVisible(false);
        popuniCbSmena();
        ubaciDanasnjiDatum();
        if (radnoVreme != null) {
            popuniZaIzmenu();
        }
    }

    private void popuniCbSmena() {
        List<Smena> smene = communication.vratiSveSmene();
        for (Smena s : smene) {
            cbSmena.addItem(s);
        }
    }

    private void ubaciDanasnjiDatum() {
        LocalDate danasnjiDatum = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        String formattedDatum = danasnjiDatum.format(formatter);
        txtDatum.setText(formattedDatum);
    }
    
    private void popuniZaIzmenu() {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        btnIzmeni.setVisible(true);
        btnDodaj.setVisible(false);
        cbSmena.setSelectedItem(radnoVreme.getSmena());
        txtDatum.setText(radnoVreme.getDatum().format(formatter));
        txtDatum.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cbSmena = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtDatum = new javax.swing.JTextField();
        btnDodaj = new javax.swing.JButton();
        btnIzmeni = new javax.swing.JButton();
        btnOdustani = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Smena:");

        jLabel2.setText("Datum:");

        btnDodaj.setText("Dodaj");
        btnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajActionPerformed(evt);
            }
        });

        btnIzmeni.setText("Izmeni");
        btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniActionPerformed(evt);
            }
        });

        btnOdustani.setText("Odustani");
        btnOdustani.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOdustaniActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbSmena, 0, 268, Short.MAX_VALUE)
                            .addComponent(txtDatum)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(btnDodaj)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnIzmeni)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnOdustani)))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSmena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDodaj)
                    .addComponent(btnIzmeni)
                    .addComponent(btnOdustani))
                .addContainerGap(150, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOdustaniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOdustaniActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnOdustaniActionPerformed

    private void btnDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajActionPerformed
        Smena smena = (Smena) cbSmena.getSelectedItem();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        String datumStr = txtDatum.getText();
        LocalDate datum = null;
        try {
            datum = LocalDate.parse(datumStr, formatter);
            if (datum.isBefore(LocalDate.now())) {
                JOptionPane.showMessageDialog(this, "Datum ne moze biti u proslosti", "Greska", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (DateTimeParseException ex) {
            JOptionPane.showMessageDialog(this, "Neispravan format datuma", "Greska", JOptionPane.ERROR_MESSAGE);
            return;
        }
        RadnoVreme novoRadnoVreme = new RadnoVreme(zaposleni, smena, datum);
        int result = communication.dodajRadnoVreme(novoRadnoVreme);
        if (result != 0) {
            JOptionPane.showMessageDialog(this, "Uspesno dodavanje radnog vremena", "Upsesno", JOptionPane.INFORMATION_MESSAGE);
            glavnaFormaRV.popuniTabeluRadnoVreme();
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Greska prilikom dodavanja radnog vremena", "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDodajActionPerformed

    private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniActionPerformed
        Smena smena = (Smena) cbSmena.getSelectedItem();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        String datumStr = txtDatum.getText();
        LocalDate datum = null;
        try {
            datum = LocalDate.parse(datumStr, formatter);
            if (datum.isBefore(LocalDate.now())) {
                JOptionPane.showMessageDialog(this, "Datum ne moze biti u proslosti", "Greska", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (DateTimeParseException ex) {
            JOptionPane.showMessageDialog(this, "Neispravan format datuma", "Greska", JOptionPane.ERROR_MESSAGE);
            return;
        }
        RadnoVreme novoRadnoVreme = new RadnoVreme(zaposleni, smena, datum);
        int result = communication.izmeniRadnoVreme(novoRadnoVreme);
        if (result != 0) {
            JOptionPane.showMessageDialog(this, "Uspesna izmena radnog vremena", "Upsesno", JOptionPane.INFORMATION_MESSAGE);
            glavnaFormaRV.popuniTabeluRadnoVreme();
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Greska prilikom izmene radnog vremena", "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnIzmeniActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodaj;
    private javax.swing.JButton btnIzmeni;
    private javax.swing.JButton btnOdustani;
    private javax.swing.JComboBox<model.Smena> cbSmena;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField txtDatum;
    // End of variables declaration//GEN-END:variables
}
